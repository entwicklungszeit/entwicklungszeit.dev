---
import { navItems } from '../data/navigation';
import Button from './ui/Button.astro';

// Get current path to determine active link
const { pathname } = Astro.url;
---

<div class="navigation-container flex items-center justify-between w-full">
  <!-- Brand title visible on all devices -->
  <div
    class="brand-title text-primary font-semibold ml-4 text-base md:text-xl truncate"
  >
    <span>Entwicklungszeit</span>
  </div>

  <!-- Mobile menu button with proper ARIA roles -->
  <button
    id="mobile-menu-button"
    class="md:hidden inline-flex items-center justify-center p-2 rounded-md text-gray-700 hover:text-primary hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-primary transition-colors ml-auto"
    aria-expanded="false"
    aria-controls="mobile-menu"
    aria-label="Navigation menu"
  >
    <svg
      id="menu-closed-icon"
      class="block h-6 w-6"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
      aria-hidden="true"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M4 6h16M4 12h16M4 18h16"></path>
    </svg>
    <svg
      id="menu-open-icon"
      class="hidden h-6 w-6"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
      aria-hidden="true"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M6 18L18 6M6 6l12 12"></path>
    </svg>
  </button>

  <!-- Desktop navigation with highlighting for active sections -->
  <nav class="hidden md:block" aria-label="Main navigation">
    <ul class="flex items-center space-x-6">
      {
        navItems.map(item => {
          const isActive =
            pathname === item.href ||
            (pathname.includes(item.href) && item.href !== '/');
          return (
            <li>
              <a
                href={item.href}
                class={`nav-link px-2 py-1 text-sm font-medium transition-colors relative group ${
                  isActive ? 'text-primary' : 'text-gray-700 hover:text-primary'
                }`}
                aria-current={isActive ? 'page' : undefined}
                data-section-id={
                  item.href.startsWith('#') ? item.href.substring(1) : null
                }
              >
                {item.label}
                <span class="highlight-indicator absolute -bottom-1 left-0 h-0.5 bg-primary transition-all duration-300 w-0" />
              </a>
            </li>
          );
        })
      }
      <li>
        <Button
          href="https://calendar.app.google/taxMeha9m5wC17S19"
          target="_blank"
          rel="noopener noreferrer"
          size="sm"
          aria-label="Termin buchen"
        >
          Dein Termin mit mir
        </Button>
      </li>
    </ul>
  </nav>

  <!-- Simplified mobile menu -->
  <div
    id="mobile-menu"
    class="hidden md:hidden fixed top-16 left-0 right-0 bg-white shadow-lg z-50 border-t"
    role="dialog"
    aria-modal="true"
  >
    <nav aria-label="Mobile navigation">
      <ul class="px-4 py-3 space-y-2">
        {
          navItems.map(item => {
            const isActive =
              pathname === item.href ||
              (pathname.includes(item.href) && item.href !== '/');
            return (
              <li>
                <a
                  href={item.href}
                  class={`block px-3 py-2 rounded-md text-base font-medium ${
                    isActive
                      ? 'text-primary bg-gray-50'
                      : 'text-gray-700 hover:text-primary hover:bg-gray-50'
                  }`}
                  aria-current={isActive ? 'page' : undefined}
                  data-section-id={
                    item.href.startsWith('#') ? item.href.substring(1) : null
                  }
                >
                  {item.label}
                </a>
              </li>
            );
          })
        }
        <li class="pt-2">
          <Button
            href="https://calendar.app.google/taxMeha9m5wC17S19"
            target="_blank"
            rel="noopener noreferrer"
            class="w-full mt-2"
            aria-label="Termin buchen"
          >
            Dein Termin mit mir
          </Button>
        </li>
      </ul>
    </nav>
  </div>
</div>

<script>
  // Mobile menu functionality
  const button = document.getElementById('mobile-menu-button');
  const menu = document.getElementById('mobile-menu');
  const closedIcon = document.getElementById('menu-closed-icon');
  const openIcon = document.getElementById('menu-open-icon');
  let isOpen = false;

  function toggleMenu() {
    isOpen = !isOpen;
    button.setAttribute('aria-expanded', isOpen.toString());

    if (isOpen) {
      // Open menu
      menu.classList.remove('hidden');
      document.body.classList.add('overflow-hidden', 'md:overflow-auto');
      closedIcon.classList.add('hidden');
      openIcon.classList.remove('hidden');
    } else {
      // Close menu
      menu.classList.add('hidden');
      document.body.classList.remove('overflow-hidden');
      closedIcon.classList.remove('hidden');
      openIcon.classList.add('hidden');
    }
  }

  // Event listeners
  button?.addEventListener('click', toggleMenu);

  // Close when clicking escape
  document.addEventListener('keydown', e => {
    if (e.key === 'Escape' && isOpen) toggleMenu();
  });

  // Close when clicking outside
  document.addEventListener('click', event => {
    const target = event.target as Node;
    if (isOpen && !button?.contains(target) && !menu?.contains(target)) {
      toggleMenu();
    }
  });

  // Close on resize to desktop
  window.addEventListener('resize', () => {
    if (isOpen && window.innerWidth >= 768) toggleMenu();
  });

  // Section highlighting based on scroll position
  const sections = document.querySelectorAll('section[id]');
  const navLinks = document.querySelectorAll('.nav-link');
  const indicators = document.querySelectorAll('.highlight-indicator');

  // Debounce function to improve scroll performance
  function debounce(func: Function, wait: number) {
    let timeout: number;
    return function executedFunction(...args: any[]) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait) as unknown as number;
    };
  }

  // Intersection Observer to detect which section is in view
  const observerOptions = {
    root: null, // viewport
    rootMargin: '-20% 0px -50% 0px', // top and bottom margins
    threshold: 0
  };

  let currentActiveSection: string | null = null;

  function updateActiveSection(entries: IntersectionObserverEntry[]) {
    entries.forEach(entry => {
      // Get the section ID
      const id = entry.target.getAttribute('id');
      if (!id) return;

      // Check if the section is intersecting (in view)
      if (entry.isIntersecting) {
        currentActiveSection = id;

        // Update navigation links
        navLinks.forEach(link => {
          const sectionId = link.getAttribute('data-section-id');
          const indicator = link.querySelector(
            '.highlight-indicator'
          ) as HTMLElement;

          if (sectionId === id) {
            // Active section
            link.classList.add('text-primary');
            link.setAttribute('aria-current', 'location');
            if (indicator) {
              indicator.style.width = '100%';
              indicator.style.opacity = '1';
              indicator.style.transition =
                'width 0.3s ease-in-out, opacity 0.2s ease-in-out';
            }
          } else {
            // Inactive section
            if (sectionId) {
              link.classList.remove('text-primary');
              link.removeAttribute('aria-current');
              if (indicator) {
                indicator.style.width = '0';
                indicator.style.opacity = '0';
                indicator.style.transition =
                  'width 0.3s ease-in-out, opacity 0.2s ease-in-out';
              }
            }
          }
        });
      }
    });
  }

  // Create observer and start observing sections
  if (sections.length > 0) {
    const observer = new IntersectionObserver(
      updateActiveSection,
      observerOptions
    );
    sections.forEach(section => observer.observe(section));

    // Also run on initial load to highlight the current section
    const checkInitialSection = () => {
      const scrollTop = window.scrollY;

      // Find which section is currently in view
      let foundActive = false;

      sections.forEach(section => {
        if (foundActive) return;

        const sectionElement = section as HTMLElement;
        const sectionTop = sectionElement.offsetTop - 100;
        const sectionHeight = sectionElement.offsetHeight;
        const sectionId = sectionElement.getAttribute('id');

        if (
          scrollTop >= sectionTop &&
          scrollTop < sectionTop + sectionHeight &&
          sectionId
        ) {
          // We found the active section
          foundActive = true;

          // Highlight the corresponding nav link
          navLinks.forEach(link => {
            const targetSection = link.getAttribute('data-section-id');
            const indicator = link.querySelector(
              '.highlight-indicator'
            ) as HTMLElement;

            if (targetSection === sectionId) {
              link.classList.add('text-primary');
              link.setAttribute('aria-current', 'location');
              if (indicator) {
                indicator.style.width = '100%';
                indicator.style.opacity = '1';
              }
            }
          });
        }
      });
    };

    // Run on page load after a short delay to ensure sections are rendered
    setTimeout(checkInitialSection, 200);

    // Fallback for scroll events if Intersection Observer doesn't work well
    const handleScroll = debounce(() => {
      if (!currentActiveSection) {
        checkInitialSection();
      }
    }, 100);

    window.addEventListener('scroll', handleScroll, { passive: true });
  }

  // Handle smooth scrolling for anchor links
  navLinks.forEach(link => {
    link.addEventListener('click', e => {
      const href = link.getAttribute('href');
      if (href?.startsWith('#')) {
        e.preventDefault();
        const targetId = href.substring(1);
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          // Close mobile menu if open
          if (isOpen) toggleMenu();

          // Smooth scroll to the element
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });

          // Update URL without page reload
          history.pushState(null, '', href);
        }
      }
    });
  });
</script>
