---
import { Image } from 'astro:assets';

const { testimonial } = Astro.props;

// Prepare the testimonial data for the onclick handler
const testimonialJson = JSON.stringify(testimonial).replace(/'/g, "\\'");

const MAX_CHARS = 365;
const hasLongReview = testimonial.reviewText.length > MAX_CHARS;
const reviewPreview = hasLongReview
  ? testimonial.reviewText.slice(0, MAX_CHARS).trim() + '...'
  : testimonial.reviewText;
---

<div class="p-2 sm:p-4">
  <div
    class="bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300 p-4 sm:p-6 flex flex-col h-full relative"
  >
    <!-- Header -->
    <div class="mb-6">
      <div class="flex justify-between items-start">
        <div>
          <h3
            class="font-display text-xl sm:text-2xl font-semibold text-gray-900 mb-2"
          >
            {testimonial.firstName}
            {testimonial.lastName}
          </h3>
          <a
            href={testimonial.projectLink}
            class="text-primary hover:text-primary-dark font-medium text-base sm:text-lg transition-colors duration-200"
          >
            {testimonial.jobTitle}
            {testimonial.company && ` @ ${testimonial.company}`}
          </a>
        </div>
      </div>
    </div>

    <!-- Content -->
    <div class="flex flex-col sm:flex-row gap-6 sm:gap-8 flex-grow">
      <div class="flex-shrink-0 mx-auto sm:mx-0">
        <Image
          src={testimonial.portraitImage.src}
          alt={testimonial.portraitImage.alt}
          class="w-32 h-32 sm:w-40 sm:h-40 object-cover rounded-3xl"
          width="160"
          height="160"
        />
      </div>
      <div class="flex-1">
        <p
          class="text-lg leading-relaxed text-gray-700 tracking-normal font-normal review-text"
          data-full-text={testimonial.reviewText}
          data-preview-text={reviewPreview}
        >
          {reviewPreview}
        </p>
        <div class="mt-4 flex flex-wrap gap-2">
          {
            hasLongReview && (
              <button
                class="px-6 py-2 bg-gradient-to-r from-primary to-secondary text-white rounded-full text-sm font-medium transition-all duration-300 hover:shadow-lg hover:scale-105 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 flex items-center read-more-btn"
                aria-expanded="false"
              >
                <span class="read-more-text">Mehr lesen</span>
                <svg
                  class="w-4 h-4 ml-2 transition-transform duration-300 read-more-icon"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </button>
            )
          }
          {
            testimonial.bio && (
              <button
                onclick={`openTestimonialModal(${testimonialJson})`}
                class="px-6 py-2 border-2 border-primary text-primary hover:text-secondary hover:border-secondary rounded-full text-sm font-medium transition-all duration-300 hover:shadow-lg hover:scale-105 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 flex items-center"
              >
                BIO
              </button>
            )
          }
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Declare the openTestimonialModal function type on the window object
  declare global {
    interface Window {
      openTestimonialModal: (testimonial: any) => void;
    }
  }

  // Add read more functionality
  document.addEventListener('DOMContentLoaded', () => {
    const readMoreButtons = document.querySelectorAll('.read-more-btn');

    readMoreButtons.forEach(button => {
      button.addEventListener('click', () => {
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        const reviewText = button.closest('div')
          .previousElementSibling as HTMLParagraphElement;
        const readMoreText = button.querySelector(
          '.read-more-text'
        ) as HTMLSpanElement;
        const readMoreIcon = button.querySelector(
          '.read-more-icon'
        ) as SVGElement;

        if (isExpanded) {
          // Show preview
          reviewText.textContent = reviewText.dataset.previewText;
          readMoreText.textContent = 'Mehr lesen';
          readMoreIcon.style.transform = 'rotate(0deg)';
          button.setAttribute('aria-expanded', 'false');
        } else {
          // Show full text
          reviewText.textContent = reviewText.dataset.fullText;
          readMoreText.textContent = 'Weniger anzeigen';
          readMoreIcon.style.transform = 'rotate(180deg)';
          button.setAttribute('aria-expanded', 'true');
        }
      });
    });
  });
</script>
