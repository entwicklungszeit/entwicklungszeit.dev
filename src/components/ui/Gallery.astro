---
import { marked } from 'marked';

interface Props {
  pages: {
    content: string;
    caption: string;
  }[];
}

const { pages } = Astro.props;

// Icons for each section
const sectionIcons = {
  'Team': `<path d="M12 11a4 4 0 1 0-4-4 4 4 0 0 0 4 4zm6 10a3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3z"/>`,
  'Erfahrungen': `<path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>`,
  'Perspektivwechsel': `<path d="M3 21h18M3 10h18M3 7l9-4 9 4M4 10v11m16-11v11M12 3v18"/>`,
  'Award': `<path d="M12 15c3.314 0 6-2.686 6-6s-2.686-6-6-6-6 2.686-6 6 2.686 6 6 6z"/><path d="M15 9l6 12H3l6-12"/>`,
};
---

<div class="gallery-container relative">
  <!-- Navigation Arrows -->
  <button
    class="gallery-nav-button prev-button"
    aria-label="Previous slide"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
    </svg>
  </button>

  <!-- Gallery Pages -->
  <div class="gallery-viewport relative overflow-hidden touch-pan-x">
    <div class="gallery-track absolute inset-0 flex transition-transform duration-500 ease-in-out">
      {pages.map((page, index) => (
        <div 
          class="gallery-page w-full flex-shrink-0 px-4 sm:px-6 py-2"
          data-index={index}
        >
          <div class="prose prose-lg max-w-none">
            <p class="text-base sm:text-lg text-gray-700" set:html={marked.parse(page.content)} />
          </div>
        </div>
      ))}
    </div>
  </div>

  <button
    class="gallery-nav-button next-button"
    aria-label="Next slide"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
  </button>

  <!-- Enhanced Indicators -->
  <div class="mt-12 px-4">
    <div class="max-w-3xl mx-auto grid grid-cols-2 sm:grid-cols-4 gap-4">
      {pages.map((page, index) => (
        <button
          class="gallery-indicator group flex flex-col items-center p-3 rounded-lg transition-all duration-300 hover:bg-gray-50"
          data-index={index}
          aria-label={`Go to slide ${index + 1}`}
        >
          <div class="w-12 h-12 mb-3 rounded-full flex items-center justify-center bg-gray-100 group-hover:bg-white transition-colors duration-300 border-2"
            class:list={[
              index === 0 ? 'border-primary bg-primary/5' : 'border-transparent',
              'group-hover:border-primary'
            ]}
          >
            <svg 
              class="w-6 h-6 transition-colors duration-300"
              class:list={[
                index === 0 ? 'text-primary' : 'text-gray-400',
                'group-hover:text-primary'
              ]}
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              stroke-width="2" 
              stroke-linecap="round" 
              stroke-linejoin="round"
            >
              <Fragment set:html={sectionIcons[page.caption]} />
            </svg>
          </div>
          <span 
            class="text-sm font-medium transition-colors duration-300 text-center"
            class:list={[
              index === 0 ? 'text-primary' : 'text-gray-500',
              'group-hover:text-primary'
            ]}
          >
            {page.caption}
          </span>
        </button>
      ))}
    </div>
  </div>
</div>

<style>
  .gallery-nav-button {
    @apply absolute top-1/2 -translate-y-1/2 z-10 flex items-center justify-center w-10 h-10 
           rounded-full bg-white/90 shadow-lg backdrop-blur-sm
           text-gray-400 hover:text-primary transition-all duration-300 
           opacity-0 hover:scale-110 hover:shadow-xl
           sm:opacity-100;
  }

  .prev-button {
    @apply -left-2 sm:-left-12;
  }

  .next-button {
    @apply -right-2 sm:-right-12;
  }

  .gallery-container:hover .gallery-nav-button {
    @apply opacity-100;
  }

  @media (max-width: 640px) {
    .gallery-nav-button {
      @apply bg-white/95 shadow-md;
    }
  }

  .gallery-page {
    height: auto;
    min-height: 100%;
  }

  .gallery-page :global(p) {
    @apply break-words;
    max-width: 100%;
    overflow-wrap: break-word;
    word-wrap: break-word;
    hyphens: auto;
    height: auto;
  }

  .gallery-viewport {
    transition: all 0.3s ease-in-out;
    height: auto !important;
    min-height: 280px;
  }

  .gallery-track {
    width: 100%;
    transform: translateX(0);
    height: auto;
  }

  .gallery-indicator {
    cursor: pointer;
    user-select: none;
  }

  .gallery-indicator:focus {
    outline: none;
  }

  /* Markdown styles */
  .gallery-page :global(strong) {
    @apply font-semibold text-gray-900;
  }

  .gallery-page :global(em) {
    @apply italic;
  }

  .gallery-page :global(a) {
    @apply text-primary hover:text-secondary underline;
  }
</style>

<script>
  class Gallery {
    private container: HTMLElement;
    private track: HTMLElement;
    private pages: HTMLElement[];
    private indicators: HTMLElement[];
    private prevButton: HTMLButtonElement;
    private nextButton: HTMLButtonElement;
    private currentIndex: number = 0;
    private isAnimating: boolean = false;
    private pageCount: number;
    private touchStartX: number = 0;
    private touchEndX: number = 0;
    private minSwipeDistance: number = 50;

    constructor(container: HTMLElement) {
      this.container = container;
      this.track = container.querySelector('.gallery-track');
      this.pages = Array.from(container.querySelectorAll('.gallery-page'));
      this.indicators = Array.from(container.querySelectorAll('.gallery-indicator'));
      this.prevButton = container.querySelector('.prev-button');
      this.nextButton = container.querySelector('.next-button');
      this.pageCount = this.pages.length;

      this.init();
    }

    private init() {
      // Set initial state
      this.updateTrackPosition();
      this.updateIndicators();

      // Event listeners
      this.prevButton.addEventListener('click', () => this.navigate('prev'));
      this.nextButton.addEventListener('click', () => this.navigate('next'));
      this.indicators.forEach(indicator => {
        indicator.addEventListener('click', () => {
          const index = parseInt(indicator.dataset.index);
          this.goToPage(index);
        });
      });

      // Touch events for swipe
      this.track.addEventListener('touchstart', (e) => this.handleTouchStart(e), { passive: true });
      this.track.addEventListener('touchmove', (e) => this.handleTouchMove(e), { passive: true });
      this.track.addEventListener('touchend', () => this.handleTouchEnd());

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') this.navigate('prev');
        if (e.key === 'ArrowRight') this.navigate('next');
      });
    }

    private handleTouchStart(e: TouchEvent) {
      this.touchStartX = e.touches[0].clientX;
    }

    private handleTouchMove(e: TouchEvent) {
      this.touchEndX = e.touches[0].clientX;
    }

    private handleTouchEnd() {
      const swipeDistance = this.touchEndX - this.touchStartX;
      const absDistance = Math.abs(swipeDistance);

      if (absDistance > this.minSwipeDistance) {
        if (swipeDistance > 0) {
          this.navigate('prev');
        } else {
          this.navigate('next');
        }
      }
    }

    private navigate(direction: 'prev' | 'next') {
      if (this.isAnimating) return;

      const newIndex = direction === 'next' 
        ? (this.currentIndex + 1) % this.pageCount
        : (this.currentIndex - 1 + this.pageCount) % this.pageCount;

      this.goToPage(newIndex);
    }

    private goToPage(index: number) {
      if (this.isAnimating || index === this.currentIndex) return;

      this.isAnimating = true;
      this.currentIndex = index;

      this.updateTrackPosition();
      this.updateIndicators();

      // Reset animation lock
      setTimeout(() => {
        this.isAnimating = false;
      }, 500);
    }

    private updateTrackPosition() {
      const offset = this.currentIndex * -100;
      this.track.style.transform = `translateX(${offset}%)`;
    }

    private updateIndicators() {
      this.indicators.forEach((indicator, i) => {
        const iconContainer = indicator.querySelector('div');
        const icon = indicator.querySelector('svg');
        const caption = indicator.querySelector('span');
        
        if (i === this.currentIndex) {
          iconContainer?.classList.add('border-primary', 'bg-primary/5');
          iconContainer?.classList.remove('border-transparent');
          icon?.classList.add('text-primary');
          icon?.classList.remove('text-gray-400');
          caption?.classList.add('text-primary');
          caption?.classList.remove('text-gray-500');
        } else {
          iconContainer?.classList.remove('border-primary', 'bg-primary/5');
          iconContainer?.classList.add('border-transparent');
          icon?.classList.remove('text-primary');
          icon?.classList.add('text-gray-400');
          caption?.classList.remove('text-primary');
          caption?.classList.add('text-gray-500');
        }
      });
    }
  }

  // Initialize all galleries on the page
  document.querySelectorAll('.gallery-container').forEach(container => {
    new Gallery(container as HTMLElement);
  });
</script>