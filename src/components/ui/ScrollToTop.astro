---
interface Props {
  targetSelector?: string;
  offset?: number;
}

const { targetSelector = 'body', offset = 0 } = Astro.props;
---

<button
  id="scroll-to-top"
  aria-label="Scroll to top"
  class="fixed bottom-6 right-6 z-50 flex items-center justify-center w-12 h-12 bg-white bg-opacity-80 backdrop-blur-sm rounded-full shadow-lg border border-gray-200 text-gray-700 hover:text-primary transition-all duration-300 opacity-0 translate-y-10 pointer-events-none"
  data-target={targetSelector}
  data-offset={offset}
>
  <span class="sr-only">Nach oben scrollen</span>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="h-6 w-6"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
    aria-hidden="true"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
  </svg>
</button>

<script>
  const scrollToTopButton = document.getElementById('scroll-to-top');
  const targetSelector = scrollToTopButton?.dataset.target || 'body';
  const offset = parseInt(scrollToTopButton?.dataset.offset || '0', 10);

  // Check for prefers-reduced-motion
  const prefersReducedMotion = window.matchMedia(
    '(prefers-reduced-motion: reduce)'
  ).matches;
  const scrollBehavior = prefersReducedMotion ? 'auto' : 'smooth';

  // Scroll to top handler
  function scrollToTop() {
    const target = document.querySelector(targetSelector);
    if (!target) return;

    const targetPosition =
      target.getBoundingClientRect().top + window.pageYOffset - offset;

    window.scrollTo({
      top: targetPosition,
      behavior: scrollBehavior
    });

    // Focus management
    setTimeout(
      () => {
        const target = document.querySelector(targetSelector);
        if (!target) return;

        const firstFocusable = target.querySelector(
          'a[href], button:not([disabled]), input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex="0"]'
        );
        if (firstFocusable) {
          (firstFocusable as HTMLElement).focus();
        }
      },
      prefersReducedMotion ? 0 : 800
    );
  }

  // Scroll event handler
  function handleScroll() {
    const scrollY = window.scrollY || document.documentElement.scrollTop;

    if (scrollY > 300) {
      scrollToTopButton?.classList.remove(
        'opacity-0',
        'translate-y-10',
        'pointer-events-none'
      );
      scrollToTopButton?.classList.add(
        'opacity-100',
        'translate-y-0',
        'pointer-events-auto'
      );
    } else {
      scrollToTopButton?.classList.add(
        'opacity-0',
        'translate-y-10',
        'pointer-events-none'
      );
      scrollToTopButton?.classList.remove(
        'opacity-100',
        'translate-y-0',
        'pointer-events-auto'
      );
    }
  }

  // Intersection observer for performance
  if ('IntersectionObserver' in window) {
    const observerOptions = {
      rootMargin: '0px 0px -80% 0px'
    };

    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (!entry.isIntersecting) {
          handleScroll();
          window.addEventListener('scroll', handleScroll, { passive: true });
        } else {
          window.removeEventListener('scroll', handleScroll);
          scrollToTopButton?.classList.add(
            'opacity-0',
            'translate-y-10',
            'pointer-events-none'
          );
        }
      });
    }, observerOptions);

    const firstSection = document.querySelector(
      'section'
    ) as HTMLElement | null;
    if (firstSection) {
      observer.observe(firstSection);
    } else {
      window.addEventListener('scroll', handleScroll, { passive: true });
    }
  } else {
    // Fallback for browsers without IntersectionObserver
    window.addEventListener('scroll', handleScroll, { passive: true });
  }

  // Click event
  scrollToTopButton?.addEventListener('click', e => {
    e.preventDefault();
    scrollToTop();
  });

  // Keyboard event
  scrollToTopButton?.addEventListener('keydown', e => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      scrollToTop();
    }
  });
</script>
