---
import Section from './ui/Section.astro';

// Recent Podcast Episodes component - displays latest episodes in a horizontal scroll

// Constants for URLs
const RSS_URL = 'https://anchor.fm/s/1003c6b34/podcast/rss';
const SPOTIFY_URL = 'https://open.spotify.com/show/3YEooAGeXyT7v7uiEzeaeb';
---

<Section id="recent-episodes" background="white">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <h2
      id="recent-episodes-title"
      class="font-display text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 mb-8 sm:mb-10 lg:mb-12 relative inline-block"
    >
      Aktuelle Folgen
      <span
        class="absolute -bottom-2 left-0 w-1/3 h-1 bg-gradient-to-r from-primary to-secondary"
      ></span>
    </h2>

    <!-- Carousel wrapper -->
    <div class="relative">
      <!-- Carousel container with ARIA attributes -->
      <div
        id="episode-carousel"
        class="relative w-full overflow-hidden"
        aria-roledescription="carousel"
        aria-label="Podcast-Episoden"
      >
        <!-- Replace with a proper skeleton container that will be removed -->
        <div
          id="skeleton-container"
          class="flex justify-center gap-4 md:gap-6 lg:gap-8"
          aria-hidden="true"
        >
          <div
            class="episode-skeleton w-full max-w-[280px] md:w-1/2 lg:w-1/4 aspect-square rounded-lg"
          >
          </div>
          <div
            class="episode-skeleton w-full max-w-[280px] md:w-1/2 lg:w-1/4 aspect-square rounded-lg hidden sm:block"
          >
          </div>
          <div
            class="episode-skeleton w-full max-w-[280px] md:w-1/2 lg:w-1/4 aspect-square rounded-lg hidden lg:block"
          >
          </div>
          <div
            class="episode-skeleton w-full max-w-[280px] md:w-1/2 lg:w-1/4 aspect-square rounded-lg hidden lg:block"
          >
          </div>
        </div>

        <!-- Actual carousel track (will be populated by JavaScript) -->
        <div
          id="episode-track"
          class="flex transition-transform duration-300 ease-out"
          role="presentation"
        >
          <!-- Episodes will be inserted here -->
        </div>
      </div>

      <!-- Pagination indicators -->
      <div
        class="flex justify-center gap-2 mt-6"
        id="carousel-indicators"
        aria-hidden="true"
      >
        <!-- Pagination dots will be inserted here by JavaScript -->
      </div>

      <!-- Navigation buttons -->
      <div>
        <button
          id="carousel-prev"
          class="absolute top-1/2 left-0 -translate-y-1/2 -translate-x-1/2 bg-white rounded-full p-2 sm:p-3 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-primary/50 transform transition-all disabled:opacity-30 disabled:cursor-not-allowed z-10"
          aria-label="Vorherige Episoden"
          aria-controls="episode-carousel"
          disabled
        >
          <svg
            class="w-5 h-5 sm:w-6 sm:h-6 text-gray-700"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"></path>
          </svg>
        </button>
        <button
          id="carousel-next"
          class="absolute top-1/2 right-0 -translate-y-1/2 translate-x-1/2 bg-white rounded-full p-2 sm:p-3 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-primary/50 transform transition-all disabled:opacity-30 disabled:cursor-not-allowed z-10"
          aria-label="NÃ¤chste Episoden"
          aria-controls="episode-carousel"
        >
          <svg
            class="w-5 h-5 sm:w-6 sm:h-6 text-gray-700"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 5l7 7-7 7"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</Section>

<style>
  /* Skeletons with soft loading pulse */
  .episode-skeleton {
    background: linear-gradient(90deg, #e5e7eb 0%, #f3f4f6 50%, #e5e7eb 100%);
    background-size: 200% 100%;
    animation: pulse 1.5s infinite;
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  @keyframes pulse {
    0% {
      background-position: 0% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  /* Episode card styling with smoother hover effect */
  .episode-card {
    position: relative;
    overflow: hidden;
    border-radius: 0.75rem;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    transition: all 0.4s cubic-bezier(0.25, 1, 0.5, 1);
    border: 1px solid rgba(0, 0, 0, 0.05);
    transform-origin: center bottom;
  }

  .episode-card:hover,
  .episode-card:focus-visible {
    box-shadow:
      0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
    transform: translateY(-6px);
    border-color: rgba(0, 0, 0, 0.1);
  }

  .episode-card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 0.75rem;
  }

  /* Focus indicator for keyboard users */
  .episode-card:focus-visible {
    outline: 2px solid var(--color-primary, #3b82f6);
    outline-offset: 2px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    // Get DOM elements
    const carousel = document.getElementById('episode-carousel');
    const track = document.getElementById('episode-track');
    const prevButton = document.getElementById('carousel-prev');
    const nextButton = document.getElementById('carousel-next');
    const indicators = document.getElementById('carousel-indicators');

    // Return if any required element is missing
    if (!carousel || !track || !prevButton || !nextButton || !indicators)
      return;

    // State variables
    let currentPage = 0;
    let totalPages = 0;
    let episodes = [];
    let itemsPerPage = 1; // Default for mobile

    // Update items per page based on responsive breakpoints
    const updateItemsPerPage = () => {
      if (window.innerWidth >= 1024) {
        // lg
        itemsPerPage = 4;
      } else if (window.innerWidth >= 768) {
        // md
        itemsPerPage = 2;
      } else {
        itemsPerPage = 1; // sm
      }

      // Recalculate total pages
      totalPages = Math.ceil(episodes.length / itemsPerPage);

      // Ensure current page is valid
      if (currentPage >= totalPages) {
        currentPage = totalPages > 0 ? totalPages - 1 : 0;
      }

      // Update UI
      updateCarousel();
      updateIndicators();

      // Rebuild the carousel pages with new layout
      buildCarouselPages();
    };

    // Function to build/rebuild carousel pages based on current itemsPerPage
    const buildCarouselPages = () => {
      if (!track) return;

      // Clear existing content
      track.innerHTML = '';

      // Build carousel pages
      for (let page = 0; page < totalPages; page++) {
        // Create page container
        const pageContainer = document.createElement('div');
        pageContainer.className =
          'flex-shrink-0 flex-grow-0 w-full flex justify-center gap-4 md:gap-6 lg:gap-8';
        pageContainer.setAttribute('aria-roledescription', 'slide');
        pageContainer.setAttribute(
          'aria-label',
          `Seite ${page + 1} von ${totalPages}`
        );
        pageContainer.style.width = '100%';

        // Add episodes for this page
        const startIdx = page * itemsPerPage;
        const endIdx = Math.min(startIdx + itemsPerPage, episodes.length);

        for (let i = startIdx; i < endIdx; i++) {
          const episode = episodes[i];

          // Create episode card with max-width constraint for proper centering
          const episodeCard = document.createElement('a');
          episodeCard.href = episode.link;
          episodeCard.target = '_blank';
          episodeCard.rel = 'noopener noreferrer';

          // Apply responsive classes with max-width
          if (itemsPerPage === 1) {
            episodeCard.className =
              'episode-card w-full max-w-[280px] aspect-square flex flex-col relative';
          } else if (itemsPerPage === 2) {
            episodeCard.className =
              'episode-card w-1/2 max-w-[280px] aspect-square flex flex-col relative';
          } else {
            episodeCard.className =
              'episode-card w-1/4 max-w-[280px] aspect-square flex flex-col relative';
          }

          episodeCard.setAttribute('aria-label', episode.title);

          // Set card content with explicit image dimensions
          episodeCard.innerHTML = `
            <div class="relative h-full w-full">
              <img
                src="${episode.thumbnail}"
                alt="${episode.title}"
                width="280"
                height="280"
                loading="lazy"
              />
            </div>
          `;

          pageContainer.appendChild(episodeCard);
        }

        // Fill remaining slots with empty spaces if needed
        const remaining = itemsPerPage - (endIdx - startIdx);
        if (remaining > 0) {
          for (let i = 0; i < remaining; i++) {
            const emptySpace = document.createElement('div');
            if (itemsPerPage === 1) {
              emptySpace.className = 'w-full max-w-[280px] aspect-square';
            } else if (itemsPerPage === 2) {
              emptySpace.className = 'w-1/2 max-w-[280px] aspect-square';
            } else {
              emptySpace.className = 'w-1/4 max-w-[280px] aspect-square';
            }
            pageContainer.appendChild(emptySpace);
          }
        }

        // Add to track
        track.appendChild(pageContainer);
      }
    };

    // Listen for window resize events with debounce
    let resizeTimeout;
    window.addEventListener('resize', () => {
      // Clear the timeout if it exists
      if (resizeTimeout) {
        clearTimeout(resizeTimeout);
      }

      // Set a new timeout to avoid excessive updates during resize
      resizeTimeout = setTimeout(() => {
        updateItemsPerPage();
      }, 250);
    });

    // Function to update carousel position
    const updateCarousel = () => {
      if (!track) return;

      // Calculate width of elements for smooth sliding
      const trackWidth = carousel.clientWidth;
      const newPosition = -currentPage * trackWidth;

      // Apply transform to slide the track
      track.style.transform = `translateX(${newPosition}px)`;

      // Update button states
      if (prevButton instanceof HTMLButtonElement) {
        prevButton.disabled = currentPage === 0;
      }
      if (nextButton instanceof HTMLButtonElement) {
        nextButton.disabled =
          currentPage === totalPages - 1 || totalPages === 0;
      }

      // Update ARIA attributes for accessibility
      carousel.setAttribute('aria-live', 'polite');
      setTimeout(() => {
        carousel.setAttribute('aria-live', 'off');
      }, 1000);
    };

    // Create and update pagination indicators
    const updateIndicators = () => {
      if (!indicators) return;

      // Clear existing indicators
      indicators.innerHTML = '';

      // Create indicator dots
      for (let i = 0; i < totalPages; i++) {
        const dot = document.createElement('button');
        dot.classList.add(
          'w-2.5',
          'h-2.5',
          'rounded-full',
          'transition-colors',
          'focus:outline-none',
          'focus:ring-2',
          'focus:ring-primary/50'
        );

        // Highlight current page
        if (i === currentPage) {
          dot.classList.add('bg-primary');
          dot.setAttribute('aria-current', 'true');
        } else {
          dot.classList.add('bg-gray-300');
        }

        // Add accessibility attributes
        dot.setAttribute('aria-label', `Gehe zu Seite ${i + 1}`);

        // Add click handler
        dot.addEventListener('click', () => {
          currentPage = i;
          updateCarousel();
          updateIndicators();
        });

        indicators.appendChild(dot);
      }
    };

    // Handle navigation buttons
    prevButton.addEventListener('click', () => {
      if (currentPage > 0) {
        currentPage--;
        updateCarousel();
        updateIndicators();
      }
    });

    nextButton.addEventListener('click', () => {
      if (currentPage < totalPages - 1) {
        currentPage++;
        updateCarousel();
        updateIndicators();
      }
    });

    // Add keyboard navigation support
    carousel.addEventListener('keydown', e => {
      if (e.key === 'ArrowLeft') {
        if (currentPage > 0) {
          currentPage--;
          updateCarousel();
          updateIndicators();
        }
      } else if (e.key === 'ArrowRight') {
        if (currentPage < totalPages - 1) {
          currentPage++;
          updateCarousel();
          updateIndicators();
        }
      }
    });

    // Fetch and process RSS feed
    try {
      // Fetch RSS feed
      const response = await fetch('https://anchor.fm/s/1003c6b34/podcast/rss');
      const xmlText = await response.text();

      // Parse XML
      const parser = new DOMParser();
      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');

      // Process episodes (limit to 12)
      const items = xmlDoc.querySelectorAll('item');
      const MAX_EPISODES = 12;

      // Remove skeleton loader
      const skeletonContainer = document.getElementById('skeleton-container');
      if (skeletonContainer) {
        skeletonContainer.remove();
      }

      // Clear track for actual content
      track.innerHTML = '';

      // Reset episodes array
      episodes = [];

      // Process up to MAX_EPISODES
      for (let i = 0; i < Math.min(items.length, MAX_EPISODES); i++) {
        const item = items[i];

        // Get episode link - prefer Spotify if available
        let link = '';
        const links = Array.from(item.querySelectorAll('link'));
        for (const linkEl of links) {
          const url = linkEl.textContent?.trim() || '';
          if (url.includes('spotify.com')) {
            link = url;
            break;
          }
        }

        // Fallback to first link
        if (!link) {
          link = item.querySelector('link')?.textContent?.trim() || '';
        }

        // Find iTunes image using attribute selection
        let thumbnail = '';
        const allElements = item.getElementsByTagName('*');
        for (let j = 0; j < allElements.length; j++) {
          const element = allElements[j];
          const nodeName = element.nodeName.toLowerCase();

          if (
            (nodeName.includes('itunes:image') ||
              (nodeName.includes('image') &&
                element.namespaceURI?.includes('itunes'))) &&
            element.hasAttribute('href')
          ) {
            thumbnail = element.getAttribute('href') || '';
            break;
          }
        }

        // Fallback to channel image
        if (!thumbnail) {
          const imageUrl = xmlDoc.querySelector('image url');
          thumbnail =
            imageUrl?.textContent ||
            'https://d3t3ozftmdmh3i.cloudfront.net/staging/podcast_uploaded_nologo/42889269/f3920f44c23f9537.jpg';
        }

        // Get episode title and description for accessibility
        const title =
          item.querySelector('title')?.textContent?.trim() || 'Podcast Episode';
        const description =
          item.querySelector('description')?.textContent?.trim() || '';

        // Extract short description (first 100 characters)
        const shortDesc =
          description.replace(/<[^>]*>/g, '').substring(0, 100) +
          (description.length > 100 ? '...' : '');

        // Create episode object
        if (link && thumbnail) {
          episodes.push({
            link,
            thumbnail,
            title,
            description: shortDesc
          });
        }
      }

      // Update responsive layout
      updateItemsPerPage();

      // No need to build pages here, it's now handled inside updateItemsPerPage

      // If no episodes were processed, show error
      if (episodes.length === 0) {
        const errorMsg = document.createElement('div');
        errorMsg.className = 'text-center text-gray-500 py-12';
        errorMsg.textContent = 'Keine Folgen gefunden';
        track.appendChild(errorMsg);
      }

      // Update indicators
      updateIndicators();

      // Enable focus on carousel for keyboard navigation
      carousel.tabIndex = 0;
    } catch (error) {
      console.error('Error loading podcast episodes:', error);

      // Clear loading skeletons
      if (track) {
        track.innerHTML = '';

        // Show error message
        const errorMsg = document.createElement('div');
        errorMsg.className = 'text-center text-gray-500 py-12';
        errorMsg.textContent = 'Fehler beim Laden der Folgen';
        track.appendChild(errorMsg);
      }
    }
  });
</script>
