---
import Section from './ui/Section.astro';

// Recent Podcast Episodes component - displays latest episodes in a horizontal scroll

// Constants for URLs
const RSS_URL = 'https://anchor.fm/s/1003c6b34/podcast/rss';
const SPOTIFY_URL = 'https://open.spotify.com/show/3YEooAGeXyT7v7uiEzeaeb';
---

<div class="podcast-episodes-section border-t border-gray-100">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <h3
      class="font-display text-2xl font-bold text-gray-900 mb-6 relative inline-block"
    >
      Neueste Episoden
      <span
        class="absolute -bottom-1 left-0 w-1/3 h-1 bg-gradient-to-r from-primary to-secondary"
      ></span>
    </h3>

    <div
      class="scroll-hint text-sm text-gray-500 mb-4 hidden md:flex items-center"
    >
      <svg
        class="w-4 h-4 mr-1.5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
      </svg>
      <span>Nach rechts scrollen für mehr Folgen</span>
    </div>

    <div class="relative">
      <div
        id="episode-carousel"
        class="flex gap-5 overflow-x-auto scrollbar-hide snap-x snap-mandatory pb-4"
      >
        <!-- Episode skeletons (will be replaced by JavaScript) -->
        <div
          class="episode-skeleton min-w-[220px] max-w-[220px] aspect-square rounded-lg"
        >
        </div>
        <div
          class="episode-skeleton min-w-[220px] max-w-[220px] aspect-square rounded-lg"
        >
        </div>
        <div
          class="episode-skeleton min-w-[220px] max-w-[220px] aspect-square rounded-lg"
        >
        </div>

        <!-- More on Spotify card -->
        <a
          href={SPOTIFY_URL}
          target="_blank"
          rel="noopener noreferrer"
          class="spotify-card flex-shrink-0 min-w-[220px] max-w-[220px] aspect-square bg-gradient-to-br from-[#1DB954]/90 to-[#1DB954] rounded-lg overflow-hidden shadow-sm hover:shadow-xl transition-all duration-500 flex flex-col items-center justify-center text-white p-4 text-center snap-start"
        >
          <svg
            class="w-14 h-14 mb-3"
            viewBox="0 0 24 24"
            fill="currentColor"
            aria-hidden="true"
          >
            <path
              d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"
            ></path>
          </svg>
          <div class="font-medium">Alle Folgen auf Spotify</div>
        </a>
      </div>

      <!-- Fade gradient to indicate scrolling -->
      <div
        class="absolute right-0 top-0 bottom-0 w-16 bg-gradient-to-l from-white to-transparent pointer-events-none hidden md:block"
      >
      </div>

      <!-- Left fade gradient (initially hidden, shown when scrolled) -->
      <div
        id="left-fade"
        class="absolute left-0 top-0 bottom-0 w-16 bg-gradient-to-r from-white to-transparent pointer-events-none hidden md:block opacity-0 transition-opacity duration-300"
      >
      </div>
    </div>
  </div>
</div>

<style>
  /* Section styling */
  .podcast-episodes-section {
    background: linear-gradient(
      180deg,
      rgba(249, 250, 251, 0.7) 0%,
      rgba(255, 255, 255, 1) 100%
    );
  }

  /* Skeletons */
  .episode-skeleton {
    background: linear-gradient(90deg, #e5e7eb 0%, #f3f4f6 50%, #e5e7eb 100%);
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  /* Hide scrollbars */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
    scroll-behavior: smooth;
  }

  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  /* Episode card styling */
  .episode-card {
    position: relative;
    overflow: hidden;
    border-radius: 0.5rem;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    transition: all 0.5s cubic-bezier(0.25, 1, 0.5, 1);
    border: 1px solid rgba(0, 0, 0, 0.05);
    transform-origin: center bottom;
  }

  .episode-card:hover {
    box-shadow:
      0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
    transform: translateY(-8px);
    border-color: rgba(0, 0, 0, 0.1);
  }

  .episode-card img {
    width: 220px;
    height: 220px;
    object-fit: cover;
    border-radius: 0.5rem;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    // Hide scroll hint if user has scrolled
    const carousel = document.getElementById('episode-carousel');
    const scrollHint = document.querySelector('.scroll-hint');
    const leftFade = document.getElementById('left-fade');

    if (carousel && scrollHint) {
      carousel.addEventListener('scroll', () => {
        // Handle scroll hint
        if (carousel.scrollLeft > 10) {
          scrollHint.classList.add('opacity-0');
          setTimeout(() => {
            scrollHint.classList.add('hidden');
          }, 300);

          // Show left fade when scrolled
          if (leftFade) {
            leftFade.classList.remove('opacity-0');
          }
        } else if (leftFade) {
          // Hide left fade when scrolled back to start
          leftFade.classList.add('opacity-0');
        }
      });
    }

    try {
      // Fetch RSS feed
      const response = await fetch('https://anchor.fm/s/1003c6b34/podcast/rss');
      const xmlText = await response.text();

      // Parse XML
      const parser = new DOMParser();
      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');

      // Get carousel element
      const carousel = document.getElementById('episode-carousel');
      if (!carousel) return;

      // Remove skeletons
      const skeletons = carousel.querySelectorAll('.episode-skeleton');
      skeletons.forEach(skeleton => skeleton.remove());

      // Get Spotify card to insert episodes before it
      const spotifyCard = carousel.querySelector('.spotify-card');

      // Process episodes (limit to 9)
      const items = xmlDoc.querySelectorAll('item');
      let processedCount = 0;

      for (let i = 0; i < items.length && processedCount < 9; i++) {
        const item = items[i];

        // Get episode link - prefer Spotify if available
        let link = '';
        const links = Array.from(item.querySelectorAll('link'));
        for (const linkEl of links) {
          const url = linkEl.textContent?.trim() || '';
          if (url.includes('spotify.com')) {
            link = url;
            break;
          }
        }

        // Fallback to first link
        if (!link) {
          link = item.querySelector('link')?.textContent?.trim() || '';
        }

        // Find iTunes image using attribute selection
        let thumbnail = '';
        const allElements = item.getElementsByTagName('*');
        for (let j = 0; j < allElements.length; j++) {
          const element = allElements[j];
          const nodeName = element.nodeName.toLowerCase();

          if (
            (nodeName.includes('itunes:image') ||
              (nodeName.includes('image') &&
                element.namespaceURI?.includes('itunes'))) &&
            element.hasAttribute('href')
          ) {
            thumbnail = element.getAttribute('href') || '';
            break;
          }
        }

        // Fallback to channel image
        if (!thumbnail) {
          const imageUrl = xmlDoc.querySelector('image url');
          thumbnail =
            imageUrl?.textContent ||
            'https://d3t3ozftmdmh3i.cloudfront.net/staging/podcast_uploaded_nologo/42889269/f3920f44c23f9537.jpg';
        }

        // Get episode title for accessibility
        const title =
          item.querySelector('title')?.textContent?.trim() || 'Podcast Episode';

        // Create episode card
        if (link && thumbnail) {
          const card = document.createElement('a');
          card.href = link;
          card.target = '_blank';
          card.rel = 'noopener noreferrer';
          card.className =
            'episode-card flex-shrink-0 min-w-[220px] max-w-[220px] aspect-square snap-start';
          card.setAttribute('aria-label', `${title} anhören`);

          // Set card content with explicit image dimensions
          card.innerHTML = `
          <div class="relative h-full w-full">
            <img
              src="${thumbnail}"
              alt="${title}"
              width="220"
              height="220"
              loading="lazy"
              style="border-radius: 0.5rem;"
            />
          </div>
        `;

          // Insert before Spotify card
          if (spotifyCard) {
            carousel.insertBefore(card, spotifyCard);
          } else {
            carousel.appendChild(card);
          }

          // Show the card immediately without animation
          card.style.opacity = '1';

          processedCount++;
        }
      }

      // If no episodes were processed, show error
      if (processedCount === 0) {
        const errorMsg = document.createElement('div');
        errorMsg.className = 'text-sm text-gray-500 px-2';
        errorMsg.textContent = 'Keine Folgen gefunden';

        if (spotifyCard) {
          carousel.insertBefore(errorMsg, spotifyCard);
        } else {
          carousel.appendChild(errorMsg);
        }
      }
    } catch (error) {
      console.error('Error loading podcast episodes:', error);

      // Get carousel element
      const carousel = document.getElementById('episode-carousel');
      if (!carousel) return;

      // Remove skeletons
      const skeletons = carousel.querySelectorAll('.episode-skeleton');
      skeletons.forEach(skeleton => skeleton.remove());

      // Show error message
      const errorMsg = document.createElement('div');
      errorMsg.className = 'text-sm text-gray-500 px-2';
      errorMsg.textContent = 'Fehler beim Laden der Folgen';

      const spotifyCard = carousel.querySelector('.spotify-card');
      if (spotifyCard) {
        carousel.insertBefore(errorMsg, spotifyCard);
      } else {
        carousel.appendChild(errorMsg);
      }
    }
  });
</script>
