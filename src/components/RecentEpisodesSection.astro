---
import Section from './ui/Section.astro';
import Heading from './Heading.astro';
import CarouselPage from './CarouselPage.astro';
import CarouselIndicators from './CarouselIndicators.astro';

interface Episode {
  link: string;
  thumbnail: string;
  title: string;
  description: string;
}

// This will be populated by client-side JavaScript
const episodes: Episode[] = [];
---

<Section id="recent-episodes" background="white">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <Heading title="Aktuelle Folgen" />

    <!-- Carousel wrapper -->
    <div class="relative">
      <!-- Carousel container with ARIA attributes -->
      <div
        id="episode-carousel"
        class="relative w-full overflow-hidden"
        aria-roledescription="carousel"
        aria-label="Podcast-Episoden"
      >
        <!-- Loading State -->
        <div id="skeleton-container" class="flex gap-4 md:gap-6 lg:gap-8">
          {
            Array.from({ length: 4 }).map(() => (
              <div class="w-full md:w-1/2 lg:w-1/4 max-w-[280px] aspect-square bg-gray-200 animate-pulse" />
            ))
          }
        </div>

        <!-- Actual carousel track (will be populated by JavaScript) -->
        <div
          id="episode-track"
          class="flex transition-transform duration-300 ease-out"
          role="presentation"
        >
          <!-- Episodes will be inserted here -->
        </div>
      </div>

      <!-- Pagination indicators -->
      <CarouselIndicators />

      <!-- Navigation buttons -->
      <div>
        <button
          id="carousel-prev"
          class="absolute top-1/2 left-0 -translate-y-1/2 -translate-x-1/2 bg-white rounded-full p-2 sm:p-3 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-primary/50 transform transition-all disabled:opacity-30 disabled:cursor-not-allowed z-10"
          aria-label="Vorherige Episoden"
          aria-controls="episode-carousel"
          disabled
        >
          <svg
            class="w-5 h-5 sm:w-6 sm:h-6 text-gray-700"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"></path>
          </svg>
        </button>
        <button
          id="carousel-next"
          class="absolute top-1/2 right-0 -translate-y-1/2 translate-x-1/2 bg-white rounded-full p-2 sm:p-3 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-primary/50 transform transition-all disabled:opacity-30 disabled:cursor-not-allowed z-10"
          aria-label="NÃ¤chste Episoden"
          aria-controls="episode-carousel"
        >
          <svg
            class="w-5 h-5 sm:w-6 sm:h-6 text-gray-700"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 5l7 7-7 7"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</Section>

<style>
  /* Skeletons with soft loading pulse */
  .episode-skeleton {
    background: linear-gradient(90deg, #e5e7eb 0%, #f3f4f6 50%, #e5e7eb 100%);
    background-size: 200% 100%;
    animation: pulse 1.5s infinite;
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  @keyframes pulse {
    0% {
      background-position: 0% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  /* Episode card styling with smoother hover effect */
  .episode-card {
    position: relative;
    overflow: hidden;
    border-radius: 0.75rem;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    transition: all 0.4s cubic-bezier(0.25, 1, 0.5, 1);
    border: 1px solid rgba(0, 0, 0, 0.05);
    transform-origin: center bottom;
  }

  .episode-card:hover,
  .episode-card:focus-visible {
    box-shadow:
      0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
    transform: translateY(-6px);
    border-color: rgba(0, 0, 0, 0.1);
  }

  .episode-card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 0.75rem;
  }

  /* Focus indicator for keyboard users */
  .episode-card:focus-visible {
    outline: 2px solid var(--color-primary, #3b82f6);
    outline-offset: 2px;
  }
</style>

<script>
  interface Episode {
    link: string;
    thumbnail: string;
    title: string;
    description: string;
  }

  class CarouselManager {
    private carousel: HTMLElement;
    private track: HTMLElement;
    private prevButton: HTMLButtonElement;
    private nextButton: HTMLButtonElement;
    private episodes: Episode[] = [];
    private currentPage = 0;
    private totalPages = 0;
    private itemsPerPage = 1;
    private touchStartX: number = 0;
    private touchEndX: number = 0;
    private minSwipeDistance: number = 50;
    private isSwiping: boolean = false;

    constructor() {
      // Get DOM elements
      this.carousel = document.getElementById('episode-carousel')!;
      this.track = document.getElementById('episode-track')!;
      this.prevButton = document.getElementById(
        'carousel-prev'
      ) as HTMLButtonElement;
      this.nextButton = document.getElementById(
        'carousel-next'
      ) as HTMLButtonElement;

      // Initialize
      this.setupEventListeners();
      this.updateItemsPerPage();
      this.loadEpisodes();
    }

    private setupEventListeners() {
      // Navigation buttons
      this.prevButton.addEventListener('click', () => this.navigate(-1));
      this.nextButton.addEventListener('click', () => this.navigate(1));

      // Keyboard navigation
      this.carousel.addEventListener('keydown', e => {
        if (e.key === 'ArrowLeft') this.navigate(-1);
        if (e.key === 'ArrowRight') this.navigate(1);
      });

      // Touch events for mobile swipe
      this.carousel.addEventListener(
        'touchstart',
        e => this.handleTouchStart(e),
        { passive: true }
      );
      this.carousel.addEventListener(
        'touchmove',
        e => this.handleTouchMove(e),
        { passive: true }
      );
      this.carousel.addEventListener('touchend', () => this.handleTouchEnd());

      // Indicator clicks
      document.addEventListener('pageChange', ((e: CustomEvent) => {
        this.goToPage(e.detail.page);
      }) as EventListener);

      // Responsive updates
      let resizeTimeout: number;
      window.addEventListener('resize', () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = window.setTimeout(() => this.updateItemsPerPage(), 250);
      });
    }

    private async loadEpisodes() {
      try {
        const response = await fetch(
          'https://anchor.fm/s/1003c6b34/podcast/rss'
        );
        const xmlText = await response.text();
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xmlText, 'text/xml');
        const items = xmlDoc.querySelectorAll('item');
        const MAX_EPISODES = 12;

        // Process episodes
        for (let i = 0; i < Math.min(items.length, MAX_EPISODES); i++) {
          const item = items[i];

          // Get episode link - prefer Spotify
          let link = '';
          const links = Array.from(item.querySelectorAll('link'));
          for (const linkEl of links) {
            const url = linkEl.textContent?.trim() || '';
            if (url.includes('spotify.com')) {
              link = url;
              break;
            }
          }
          if (!link) {
            link = item.querySelector('link')?.textContent?.trim() || '';
          }

          // Get thumbnail
          let thumbnail = '';
          const allElements = item.getElementsByTagName('*');
          for (const element of allElements) {
            const nodeName = element.nodeName.toLowerCase();
            if (
              (nodeName.includes('itunes:image') ||
                (nodeName.includes('image') &&
                  element.namespaceURI?.includes('itunes'))) &&
              element.hasAttribute('href')
            ) {
              thumbnail = element.getAttribute('href') || '';
              break;
            }
          }

          // Fallback thumbnail
          if (!thumbnail) {
            const imageUrl = xmlDoc.querySelector('image url');
            thumbnail =
              imageUrl?.textContent ||
              'https://d3t3ozftmdmh3i.cloudfront.net/staging/podcast_uploaded_nologo/42889269/f3920f44c23f9537.jpg';
          }

          // Get episode details
          const title =
            item.querySelector('title')?.textContent?.trim() ||
            'Podcast Episode';
          const description =
            item.querySelector('description')?.textContent?.trim() || '';
          const shortDesc =
            description.replace(/<[^>]*>/g, '').substring(0, 100) +
            (description.length > 100 ? '...' : '');

          if (link && thumbnail) {
            this.episodes.push({
              link,
              thumbnail,
              title,
              description: shortDesc
            });
          }
        }

        // Remove skeleton and update UI
        const skeleton = document.getElementById('skeleton-container');
        if (skeleton) skeleton.remove();

        this.updateItemsPerPage();
        this.updateCarousel();
      } catch (error) {
        console.error('Error loading podcast episodes:', error);
        if (this.track) {
          this.track.innerHTML = `
            <div class="text-center text-gray-500 py-12">
              Fehler beim Laden der Folgen
            </div>
          `;
        }
      }
    }

    private updateItemsPerPage() {
      // Update items per page based on screen size
      if (window.innerWidth >= 1024) {
        this.itemsPerPage = 4;
      } else if (window.innerWidth >= 768) {
        this.itemsPerPage = 2;
      } else {
        this.itemsPerPage = 1;
      }

      // Update total pages
      this.totalPages = Math.ceil(this.episodes.length / this.itemsPerPage);

      // Ensure current page is valid
      if (this.currentPage >= this.totalPages) {
        this.currentPage = Math.max(0, this.totalPages - 1);
      }

      this.updateCarousel();
    }

    private updateCarousel() {
      if (!this.track) return;

      // Clear track
      this.track.innerHTML = '';

      // Create pages
      for (let i = 0; i < this.totalPages; i++) {
        const pageHtml = this.createCarouselPage(i);
        this.track.insertAdjacentHTML('beforeend', pageHtml);
      }

      // Update transform with smooth transition
      const trackWidth = this.carousel.clientWidth;
      this.track.style.transition = 'transform 300ms ease-out';
      this.track.style.transform = `translateX(${-this.currentPage * trackWidth}px)`;

      // Update button states
      this.prevButton.disabled = this.currentPage === 0;
      this.nextButton.disabled = this.currentPage === this.totalPages - 1;

      // Update indicators
      this.updateIndicators();
    }

    private createCarouselPage(pageIndex: number): string {
      const startIdx = pageIndex * this.itemsPerPage;
      const endIdx = Math.min(
        startIdx + this.itemsPerPage,
        this.episodes.length
      );
      const pageEpisodes = this.episodes.slice(startIdx, endIdx);

      const cardWidth =
        this.itemsPerPage === 1
          ? 'w-full'
          : this.itemsPerPage === 2
            ? 'w-1/2'
            : 'w-1/4';

      let html = `
        <div class="flex-shrink-0 flex-grow-0 w-full flex justify-center gap-4 md:gap-6 lg:gap-8"
             aria-roledescription="slide"
             aria-label="Seite ${pageIndex + 1} von ${this.totalPages}">
      `;

      // Add episode cards
      pageEpisodes.forEach(episode => {
        html += `
          <a href="${episode.link}"
             target="_blank"
             rel="noopener noreferrer"
             class="episode-card ${cardWidth} max-w-[280px] aspect-square flex flex-col relative"
             aria-label="${episode.title}">
            <div class="relative h-full w-full">
              <img src="${episode.thumbnail}"
                   alt="${episode.title}"
                   width="280"
                   height="280"
                   loading="lazy"
                   title="${episode.description}" />
            </div>
          </a>
        `;
      });

      // Add empty spaces if needed
      const remaining = this.itemsPerPage - pageEpisodes.length;
      for (let i = 0; i < remaining; i++) {
        html += `<div class="${cardWidth} max-w-[280px] aspect-square"></div>`;
      }

      html += '</div>';
      return html;
    }

    private updateIndicators() {
      const event = new CustomEvent('updateIndicators', {
        detail: {
          currentPage: this.currentPage,
          totalPages: this.totalPages
        }
      });
      document.dispatchEvent(event);
    }

    private navigate(direction: number) {
      const newPage = this.currentPage + direction;
      if (newPage >= 0 && newPage < this.totalPages) {
        this.goToPage(newPage);
      }
    }

    private goToPage(page: number) {
      this.currentPage = page;
      this.updateCarousel();
    }

    private handleTouchStart(e: TouchEvent) {
      this.touchStartX = e.touches[0].clientX;
      this.isSwiping = true;
      this.track.style.transition = 'none'; // Disable transition during swipe
    }

    private handleTouchMove(e: TouchEvent) {
      if (!this.isSwiping) return;

      this.touchEndX = e.touches[0].clientX;
      const diffX = this.touchStartX - this.touchEndX;
      const trackWidth = this.carousel.clientWidth;

      // Calculate the new transform position
      const currentTransform = -(this.currentPage * trackWidth);
      const newTransform = currentTransform - diffX;

      // Apply boundaries to prevent overscrolling
      if (
        (this.currentPage === 0 && diffX < 0) ||
        (this.currentPage === this.totalPages - 1 && diffX > 0)
      ) {
        // Add resistance when trying to swipe beyond bounds
        this.track.style.transform = `translateX(${currentTransform - diffX * 0.3}px)`;
      } else {
        this.track.style.transform = `translateX(${newTransform}px)`;
      }
    }

    private handleTouchEnd() {
      if (!this.isSwiping) return;

      this.isSwiping = false;
      this.track.style.transition = 'transform 300ms ease-out'; // Restore transition

      const diffX = this.touchStartX - this.touchEndX;
      const absX = Math.abs(diffX);

      if (absX >= this.minSwipeDistance) {
        // Swipe threshold met - navigate
        if (diffX > 0 && this.currentPage < this.totalPages - 1) {
          // Swipe left
          this.navigate(1);
        } else if (diffX < 0 && this.currentPage > 0) {
          // Swipe right
          this.navigate(-1);
        } else {
          // Reset to current page if at bounds
          this.goToPage(this.currentPage);
        }
      } else {
        // Swipe threshold not met - reset to current page
        this.goToPage(this.currentPage);
      }
    }
  }

  // Initialize carousel when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new CarouselManager();
  });
</script>
