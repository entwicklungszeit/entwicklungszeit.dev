---
import TestimonialCard from './TestimonialCard.astro';
import TestimonialModal from './TestimonialModal.astro';

const { testimonials } = Astro.props;
---

<div class="relative testimonial-carousel">
  <!-- Navigation Buttons -->
  <button
    onclick="moveCarousel('prev')"
    class="hidden md:block absolute left-0 md:-left-4 lg:-left-12 top-1/2 -translate-y-1/2 bg-white p-2 rounded-full shadow-lg text-primary hover:text-primary-dark transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 z-10"
    aria-label="Previous testimonial"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M15 19l-7-7 7-7"></path>
    </svg>
  </button>

  <div class="relative overflow-hidden px-2 sm:px-8 md:px-12 lg:px-20 py-4">
    <!-- Add a clip container -->
    <div class="overflow-hidden">
      <div
        class="flex transition-transform duration-500 ease-in-out"
        id="carousel-track"
      >
        {
          testimonials.map((testimonial, index) => (
            <div class="w-full flex-shrink-0">
              <TestimonialCard testimonial={testimonial} />
            </div>
          ))
        }
      </div>
    </div>
  </div>

  <button
    onclick="moveCarousel('next')"
    class="hidden md:block absolute right-0 md:-right-4 lg:-right-12 top-1/2 -translate-y-1/2 bg-white p-2 rounded-full shadow-lg text-primary hover:text-primary-dark transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 z-10"
    aria-label="Next testimonial"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M9 5l7 7-7 7"></path>
    </svg>
  </button>

  <!-- Indicators -->
  <div class="flex justify-center mt-6 gap-2">
    {
      testimonials.map((_, index) => (
        <button
          onclick={`moveToSlide(${index})`}
          class="w-3 h-3 rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 bg-gray-300 hover:bg-gray-400 indicator-dot"
          data-index={index}
          aria-label={`Go to testimonial ${index + 1}`}
        />
      ))
    }
  </div>

  <TestimonialModal />
</div>

<script>
  declare global {
    interface Window {
      moveCarousel: (direction: 'next' | 'prev') => void;
      moveToSlide: (index: number) => void;
    }
  }

  let currentIndex = 0;
  const track = document.getElementById('carousel-track');
  const carousel = document.querySelector('.testimonial-carousel');
  const indicators = document.querySelectorAll('.indicator-dot');
  const totalSlides = indicators.length;

  function updateCarousel() {
    if (!track) return;
    track.style.transform = `translateX(-${currentIndex * 100}%)`;

    // Update indicators
    indicators.forEach((dot, index) => {
      if (index === currentIndex) {
        dot.classList.add('bg-primary');
        dot.classList.remove('bg-gray-300');
      } else {
        dot.classList.remove('bg-primary');
        dot.classList.add('bg-gray-300');
      }
    });
  }

  window.moveCarousel = (direction: 'next' | 'prev') => {
    if (direction === 'next') {
      currentIndex = (currentIndex + 1) % totalSlides;
    } else {
      currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
    }
    updateCarousel();
  };

  window.moveToSlide = (index: number) => {
    currentIndex = index;
    updateCarousel();
  };

  // Improved touch handling
  let touchStartX = 0;
  let touchStartY = 0;
  let isSwiping = false;

  carousel?.addEventListener(
    'touchstart',
    (e: TouchEvent) => {
      touchStartX = e.touches[0].clientX;
      touchStartY = e.touches[0].clientY;
      isSwiping = false;
    },
    { passive: true }
  );

  carousel?.addEventListener(
    'touchmove',
    (e: TouchEvent) => {
      if (!touchStartX || !touchStartY) return;

      const touchCurrentX = e.touches[0].clientX;
      const touchCurrentY = e.touches[0].clientY;
      const deltaX = touchStartX - touchCurrentX;
      const deltaY = touchStartY - touchCurrentY;

      // If horizontal scrolling is more prominent than vertical, it's likely a swipe
      if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 10) {
        isSwiping = true;
      }
    },
    { passive: true }
  );

  carousel?.addEventListener(
    'touchend',
    (e: TouchEvent) => {
      if (!isSwiping) return;

      const touchEndX = e.changedTouches[0].clientX;
      const deltaX = touchStartX - touchEndX;

      if (Math.abs(deltaX) > 50) {
        window.moveCarousel(deltaX > 0 ? 'next' : 'prev');
      }

      touchStartX = 0;
      touchStartY = 0;
      isSwiping = false;
    },
    { passive: true }
  );

  // Initialize carousel
  updateCarousel();
</script>
